import { Twilio } from 'twilio';
import { Appointment, Service, Provider, Client } from '../shared/schema';
import { formatDate, formatTime } from './utils';
import logger from './logger';

// Verificar se as credenciais do Twilio est√£o configuradas
const TWILIO_ACCOUNT_SID = process.env.TWILIO_ACCOUNT_SID;
const TWILIO_AUTH_TOKEN = process.env.TWILIO_AUTH_TOKEN;
const TWILIO_WHATSAPP_NUMBER = process.env.TWILIO_WHATSAPP_NUMBER; // Formato: 'whatsapp:+14155238886'

// Inicializar cliente do Twilio se as credenciais estiverem dispon√≠veis
let twilioClient: Twilio | null = null;

if (TWILIO_ACCOUNT_SID && TWILIO_AUTH_TOKEN) {
  twilioClient = new Twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);
  logger.info('Servi√ßo WhatsApp inicializado com Twilio');
} else {
  logger.warn('Credenciais do Twilio n√£o encontradas. Servi√ßo de WhatsApp desativado.');
}

/**
 * Normaliza o n√∫mero de telefone para o formato esperado pelo WhatsApp
 * @param phoneNumber N√∫mero de telefone (ex: +5511999999999)
 * @returns N√∫mero formatado (ex: whatsapp:+5511999999999)
 */
function formatWhatsAppNumber(phoneNumber: string): string {
  // Remover caracteres n√£o num√©ricos
  const normalizedNumber = phoneNumber.replace(/[^\d+]/g, '');
  
  // Adicionar prefixo do pa√≠s se n√£o existir
  let formattedNumber = normalizedNumber;
  if (!normalizedNumber.startsWith('+')) {
    formattedNumber = `+55${normalizedNumber}`; // Assumindo Brasil como padr√£o
  }
  
  // Adicionar prefixo whatsapp:
  return `whatsapp:${formattedNumber}`;
}

/**
 * Envia uma mensagem via WhatsApp usando o Twilio
 * @param to N√∫mero do destinat√°rio (ser√° normalizado automaticamente)
 * @param message Mensagem a ser enviada
 * @returns Promise com o resultado do envio
 */
async function sendWhatsAppMessage(to: string, message: string): Promise<boolean> {
  if (!twilioClient || !TWILIO_WHATSAPP_NUMBER) {
    logger.warn('Tentativa de envio de WhatsApp sem configura√ß√£o. Mensagem n√£o enviada.');
    return false;
  }

  try {
    const formattedTo = formatWhatsAppNumber(to);
    const response = await twilioClient.messages.create({
      from: TWILIO_WHATSAPP_NUMBER,
      to: formattedTo,
      body: message
    });

    logger.info(`Mensagem WhatsApp enviada para ${to}. SID: ${response.sid}`);
    return true;
  } catch (error: any) {
    logger.error(`Erro ao enviar mensagem WhatsApp: ${error.message}`, error);
    return false;
  }
}

/**
 * Envia notifica√ß√£o de confirma√ß√£o ap√≥s cria√ß√£o de agendamento
 */
export async function sendAppointmentConfirmation(
  appointment: Appointment,
  service: Service,
  provider: Provider,
  client: Client
): Promise<boolean> {
  if (!client.phone) {
    logger.warn(`Cliente ${client.name} n√£o possui telefone. Notifica√ß√£o WhatsApp n√£o enviada.`);
    return false;
  }

  const message = `Ol√°, ${client.name}! Seu agendamento foi confirmado.

üìÖ *Servi√ßo*: ${service.name}
üìÜ *Data*: ${formatDate(appointment.appointmentDate)}
‚è∞ *Hor√°rio*: ${formatTime(appointment.appointmentTime)}
üë®‚Äçüíº *Profissional*: ${provider.name}
${appointment.totalPrice ? `üí∞ *Valor*: R$ ${appointment.totalPrice.toFixed(2)}` : ''}

${appointment.pixQrCode ? `Um pagamento via PIX foi gerado e est√° dispon√≠vel no seu agendamento.` : ''}

Para cancelar ou reagendar, entre em contato conosco.
Obrigado por agendar conosco!`;

  return sendWhatsAppMessage(client.phone, message);
}

/**
 * Envia lembrete de agendamento 24h antes
 */
export async function sendAppointmentReminder(
  appointment: Appointment,
  service: Service,
  provider: Provider,
  client: Client
): Promise<boolean> {
  if (!client.phone) {
    logger.warn(`Cliente ${client.name} n√£o possui telefone. Lembrete WhatsApp n√£o enviado.`);
    return false;
  }

  const message = `Ol√°, ${client.name}! Lembrete do seu agendamento para amanh√£.

üìÖ *Servi√ßo*: ${service.name}
üìÜ *Data*: ${formatDate(appointment.appointmentDate)}
‚è∞ *Hor√°rio*: ${formatTime(appointment.appointmentTime)}
üë®‚Äçüíº *Profissional*: ${provider.name}
üìç *Local*: ${provider.address || 'Endere√ßo n√£o informado'}

${appointment.notes ? `üìù *Observa√ß√µes*: ${appointment.notes}` : ''}

Para cancelar ou reagendar, entre em contato conosco.
Obrigado e at√© breve!`;

  return sendWhatsAppMessage(client.phone, message);
}

/**
 * Envia notifica√ß√£o de cancelamento de agendamento
 */
export async function sendAppointmentCancellation(
  appointment: Appointment,
  service: Service,
  provider: Provider,
  client: Client,
  reason?: string
): Promise<boolean> {
  if (!client.phone) {
    logger.warn(`Cliente ${client.name} n√£o possui telefone. Notifica√ß√£o de cancelamento n√£o enviada.`);
    return false;
  }

  const message = `Ol√°, ${client.name}. O seu agendamento foi cancelado.

üìÖ *Servi√ßo*: ${service.name}
üìÜ *Data*: ${formatDate(appointment.appointmentDate)}
‚è∞ *Hor√°rio*: ${formatTime(appointment.appointmentTime)}
${reason ? `üìù *Motivo*: ${reason}` : ''}

Entre em contato conosco para reagendar em outra data/hor√°rio.
Agradecemos sua compreens√£o.`;

  return sendWhatsAppMessage(client.phone, message);
}

/**
 * Envia notifica√ß√£o de altera√ß√£o de agendamento
 */
export async function sendAppointmentReschedule(
  appointment: Appointment,
  service: Service, 
  provider: Provider,
  client: Client,
  oldDate: Date,
  oldTime: string
): Promise<boolean> {
  if (!client.phone) {
    logger.warn(`Cliente ${client.name} n√£o possui telefone. Notifica√ß√£o de reagendamento n√£o enviada.`);
    return false;
  }

  const message = `Ol√°, ${client.name}. O seu agendamento foi alterado.

üìÖ *Servi√ßo*: ${service.name}

*De:*
üìÜ Data: ${formatDate(oldDate)}
‚è∞ Hor√°rio: ${oldTime}

*Para:*
üìÜ Data: ${formatDate(appointment.appointmentDate)}
‚è∞ Hor√°rio: ${formatTime(appointment.appointmentTime)}
üë®‚Äçüíº Profissional: ${provider.name}

Se voc√™ tiver alguma d√∫vida ou precisar fazer altera√ß√µes, entre em contato conosco.
Obrigado!`;

  return sendWhatsAppMessage(client.phone, message);
}

/**
 * Verifica se o servi√ßo de WhatsApp est√° configurado e dispon√≠vel
 */
export function isWhatsAppServiceAvailable(): boolean {
  return !!twilioClient && !!TWILIO_WHATSAPP_NUMBER;
}

export default {
  sendAppointmentConfirmation,
  sendAppointmentReminder,
  sendAppointmentCancellation,
  sendAppointmentReschedule,
  isWhatsAppServiceAvailable
};